// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scheduler.Domain;

#nullable disable

namespace Scheduler.Domain.Migrations
{
    [DbContext(typeof(SchedulerContext))]
    [Migration("20240127162218_Add_OrderIndex_Property_To_Holiday")]
    partial class Add_OrderIndex_Property_To_Holiday
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("scheduler")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Scheduler.Domain.Models.Holiday", b =>
                {
                    b.Property<int>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayId"));

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPlantObserved")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.HasKey("HolidayId");

                    b.ToTable("Holiday", "scheduler");

                    b.HasData(
                        new
                        {
                            HolidayId = 1,
                            HolidayName = "New Years Day",
                            IsPlantObserved = true,
                            Note = "celebrated on the anniversary date, January 1",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 2,
                            HolidayName = "Martin Luther King Jr. Birthday",
                            IsPlantObserved = false,
                            Note = "observed on the third Monday of January",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 3,
                            HolidayName = "Presidents Day",
                            IsPlantObserved = false,
                            Note = "observed on the third Monday of each February ",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 4,
                            HolidayName = "Memorial Day",
                            IsPlantObserved = true,
                            Note = "observed on the last Monday of May",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 5,
                            HolidayName = "Independence Day",
                            IsPlantObserved = true,
                            Note = "celebrated on the anniversary date, July 4",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 6,
                            HolidayName = "Labor Day",
                            IsPlantObserved = true,
                            Note = "observed on the first Monday of each September ",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 7,
                            HolidayName = "Veterans Day",
                            IsPlantObserved = true,
                            Note = "celebrated on the anniversary date, November 11",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 8,
                            HolidayName = "Indigenous Peoples’ Day",
                            IsPlantObserved = false,
                            Note = "celebrated on the second Monday of each October ",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 9,
                            HolidayName = "Thanksgiving Day",
                            IsPlantObserved = true,
                            Note = "celebrated on the fourth Thursday of each November",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 10,
                            HolidayName = "Thanksgiving Holiday",
                            IsPlantObserved = true,
                            Note = "observed on the day after Thanksgiving",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 11,
                            HolidayName = "Christmas Eve",
                            IsPlantObserved = true,
                            Note = "celebrated on the anniversary date, December 24",
                            OrderIndex = 0
                        },
                        new
                        {
                            HolidayId = 12,
                            HolidayName = "Christmas Day",
                            IsPlantObserved = true,
                            Note = "celebrated on the anniversary date, December 25",
                            OrderIndex = 0
                        });
                });

            modelBuilder.Entity("Scheduler.Domain.Models.HolidayDate", b =>
                {
                    b.Property<int>("HolidayDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayDateId"));

                    b.Property<int?>("HolidayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ObserveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("HolidayDateId");

                    b.HasIndex("HolidayId");

                    b.HasIndex("YearId");

                    b.ToTable("HolidayDate", "scheduler");
                });

            modelBuilder.Entity("Scheduler.Domain.Models.PtoAnnual", b =>
                {
                    b.Property<int>("PtoAnnualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PtoAnnualId"));

                    b.Property<float>("CarriedOverHours")
                        .HasColumnType("real");

                    b.Property<float>("CompTimeHours")
                        .HasColumnType("real");

                    b.Property<float>("FloatingHours")
                        .HasColumnType("real");

                    b.Property<float?>("PtoDays")
                        .HasColumnType("real");

                    b.Property<float>("PtoHours")
                        .HasColumnType("real");

                    b.Property<float>("PurchasedHours")
                        .HasColumnType("real");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("PtoAnnualId");

                    b.HasIndex("YearId");

                    b.ToTable("PtoAnnual", "scheduler");
                });

            modelBuilder.Entity("Scheduler.Domain.Models.PtoSchedule", b =>
                {
                    b.Property<int>("PtoScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PtoScheduleId"));

                    b.Property<float>("Hours")
                        .HasColumnType("real");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("bit");

                    b.Property<int>("PtoAnnualId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PtoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PtoScheduleId");

                    b.HasIndex("PtoAnnualId");

                    b.ToTable("PtoSchedule", "scheduler");
                });

            modelBuilder.Entity("Scheduler.Domain.Models.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearId"));

                    b.Property<int>("YearNumber")
                        .HasColumnType("int");

                    b.HasKey("YearId");

                    b.ToTable("Year", "scheduler");

                    b.HasData(
                        new
                        {
                            YearId = 1,
                            YearNumber = 2022
                        },
                        new
                        {
                            YearId = 2,
                            YearNumber = 2023
                        },
                        new
                        {
                            YearId = 3,
                            YearNumber = 2024
                        },
                        new
                        {
                            YearId = 4,
                            YearNumber = 2025
                        });
                });

            modelBuilder.Entity("Scheduler.Domain.Models.HolidayDate", b =>
                {
                    b.HasOne("Scheduler.Domain.Models.Holiday", "Holiday")
                        .WithMany()
                        .HasForeignKey("HolidayId");

                    b.HasOne("Scheduler.Domain.Models.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holiday");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Scheduler.Domain.Models.PtoAnnual", b =>
                {
                    b.HasOne("Scheduler.Domain.Models.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Scheduler.Domain.Models.PtoSchedule", b =>
                {
                    b.HasOne("Scheduler.Domain.Models.PtoAnnual", "PtoAnnual")
                        .WithMany()
                        .HasForeignKey("PtoAnnualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PtoAnnual");
                });
#pragma warning restore 612, 618
        }
    }
}
